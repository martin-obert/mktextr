// Code generated by goa v3.20.0, DO NOT EDIT.
//
// mktextr HTTP server types
//
// Command:
// $ goa gen mktextr/design

package server

import (
	mktextr "mktextr/gen/mktextr"

	goa "goa.design/goa/v3/pkg"
)

// CompleteTaskRequestBody is the type of the "mktextr" service "completeTask"
// endpoint HTTP request body.
type CompleteTaskRequestBody struct {
	// The file to upload
	File []byte `encoding:"form"`
	// Name of the file
	Filename *string `encoding:"form"`
}

// GetTextureByCoordinatesPermanentRedirectResponseBody is the type of the
// "mktextr" service "getTextureByCoordinates" endpoint HTTP response body.
type GetTextureByCoordinatesPermanentRedirectResponseBody struct {
	XmktextrTaskID *string `form:"X-mktextr-task-id,omitempty" json:"X-mktextr-task-id,omitempty" xml:"X-mktextr-task-id,omitempty"`
}

// GetTextureByCoordinatesAcceptedResponseBody is the type of the "mktextr"
// service "getTextureByCoordinates" endpoint HTTP response body.
type GetTextureByCoordinatesAcceptedResponseBody struct {
	Location *string `form:"Location,omitempty" json:"Location,omitempty" xml:"Location,omitempty"`
}

// GetTextureByCoordinatesInternalServerErrorResponseBody is the type of the
// "mktextr" service "getTextureByCoordinates" endpoint HTTP response body.
type GetTextureByCoordinatesInternalServerErrorResponseBody struct {
	XmktextrTaskID *string `form:"X-mktextr-task-id,omitempty" json:"X-mktextr-task-id,omitempty" xml:"X-mktextr-task-id,omitempty"`
	Location       *string `form:"Location,omitempty" json:"Location,omitempty" xml:"Location,omitempty"`
}

// NewGetTextureByCoordinatesPermanentRedirectResponseBody builds the HTTP
// response body from the result of the "getTextureByCoordinates" endpoint of
// the "mktextr" service.
func NewGetTextureByCoordinatesPermanentRedirectResponseBody(res *mktextr.GetTextureByCoordinatesResult) *GetTextureByCoordinatesPermanentRedirectResponseBody {
	body := &GetTextureByCoordinatesPermanentRedirectResponseBody{
		XmktextrTaskID: res.XmktextrTaskID,
	}
	return body
}

// NewGetTextureByCoordinatesAcceptedResponseBody builds the HTTP response body
// from the result of the "getTextureByCoordinates" endpoint of the "mktextr"
// service.
func NewGetTextureByCoordinatesAcceptedResponseBody(res *mktextr.GetTextureByCoordinatesResult) *GetTextureByCoordinatesAcceptedResponseBody {
	body := &GetTextureByCoordinatesAcceptedResponseBody{
		Location: res.Location,
	}
	return body
}

// NewGetTextureByCoordinatesInternalServerErrorResponseBody builds the HTTP
// response body from the result of the "getTextureByCoordinates" endpoint of
// the "mktextr" service.
func NewGetTextureByCoordinatesInternalServerErrorResponseBody(res *mktextr.GetTextureByCoordinatesResult) *GetTextureByCoordinatesInternalServerErrorResponseBody {
	body := &GetTextureByCoordinatesInternalServerErrorResponseBody{
		XmktextrTaskID: res.XmktextrTaskID,
		Location:       res.Location,
	}
	return body
}

// NewGetTextureByIDPayload builds a mktextr service getTextureById endpoint
// payload.
func NewGetTextureByIDPayload(id string) *mktextr.GetTextureByIDPayload {
	v := &mktextr.GetTextureByIDPayload{}
	v.ID = id

	return v
}

// NewGetTextureByCoordinatesPayload builds a mktextr service
// getTextureByCoordinates endpoint payload.
func NewGetTextureByCoordinatesPayload(worldID string, x int, y int) *mktextr.GetTextureByCoordinatesPayload {
	v := &mktextr.GetTextureByCoordinatesPayload{}
	v.WorldID = worldID
	v.X = x
	v.Y = y

	return v
}

// NewCompleteTaskPayload builds a mktextr service completeTask endpoint
// payload.
func NewCompleteTaskPayload(body *CompleteTaskRequestBody, taskID string) *mktextr.CompleteTaskPayload {
	v := &mktextr.CompleteTaskPayload{
		File:     body.File,
		Filename: *body.Filename,
	}
	v.TaskID = taskID

	return v
}

// ValidateCompleteTaskRequestBody runs the validations defined on
// CompleteTaskRequestBody
func ValidateCompleteTaskRequestBody(body *CompleteTaskRequestBody) (err error) {
	if body.File == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("file", "body"))
	}
	if body.Filename == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("filename", "body"))
	}
	return
}
