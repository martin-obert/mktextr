// Code generated by goa v3.20.0, DO NOT EDIT.
//
// mktextr HTTP server types
//
// Command:
// $ goa gen mktextr/design

package server

import (
	mktextr "mktextr/gen/mktextr"

	goa "goa.design/goa/v3/pkg"
)

// CompleteTaskRequestBody is the type of the "mktextr" service "completeTask"
// endpoint HTTP request body.
type CompleteTaskRequestBody struct {
	// The texture
	Texture []byte `form:"texture,omitempty" json:"texture,omitempty" xml:"texture,omitempty"`
}

// GetTextureByIDResponseBody is the type of the "mktextr" service
// "getTextureById" endpoint HTTP response body.
type GetTextureByIDResponseBody struct {
	// Unique identifier
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetTextureByCoordinatesResponseBody is the type of the "mktextr" service
// "getTextureByCoordinates" endpoint HTTP response body.
type GetTextureByCoordinatesResponseBody struct {
	// Unique identifier
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// NewGetTextureByIDResponseBody builds the HTTP response body from the result
// of the "getTextureById" endpoint of the "mktextr" service.
func NewGetTextureByIDResponseBody(res *mktextr.TextureReferencePayload) *GetTextureByIDResponseBody {
	body := &GetTextureByIDResponseBody{
		ID: res.ID,
	}
	return body
}

// NewGetTextureByCoordinatesResponseBody builds the HTTP response body from
// the result of the "getTextureByCoordinates" endpoint of the "mktextr"
// service.
func NewGetTextureByCoordinatesResponseBody(res *mktextr.TextureReferencePayload) *GetTextureByCoordinatesResponseBody {
	body := &GetTextureByCoordinatesResponseBody{
		ID: res.ID,
	}
	return body
}

// NewGetTextureByIDPayload builds a mktextr service getTextureById endpoint
// payload.
func NewGetTextureByIDPayload(id string) *mktextr.GetTextureByIDPayload {
	v := &mktextr.GetTextureByIDPayload{}
	v.ID = id

	return v
}

// NewGetTextureByCoordinatesPayload builds a mktextr service
// getTextureByCoordinates endpoint payload.
func NewGetTextureByCoordinatesPayload(worldID string, x int, y int) *mktextr.GetTextureByCoordinatesPayload {
	v := &mktextr.GetTextureByCoordinatesPayload{}
	v.WorldID = worldID
	v.X = x
	v.Y = y

	return v
}

// NewCompleteTaskTaskCompletionPayload builds a mktextr service completeTask
// endpoint payload.
func NewCompleteTaskTaskCompletionPayload(body *CompleteTaskRequestBody, taskID string) *mktextr.TaskCompletionPayload {
	v := &mktextr.TaskCompletionPayload{
		Texture: body.Texture,
	}
	v.TaskID = taskID

	return v
}

// ValidateCompleteTaskRequestBody runs the validations defined on
// CompleteTaskRequestBody
func ValidateCompleteTaskRequestBody(body *CompleteTaskRequestBody) (err error) {
	if body.Texture == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("texture", "body"))
	}
	return
}
