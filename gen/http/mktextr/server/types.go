// Code generated by goa v3.20.0, DO NOT EDIT.
//
// mktextr HTTP server types
//
// Command:
// $ goa gen mktextr/design

package server

import (
	mktextr "mktextr/gen/mktextr"

	goa "goa.design/goa/v3/pkg"
)

// CompleteTaskRequestBody is the type of the "mktextr" service "completeTask"
// endpoint HTTP request body.
type CompleteTaskRequestBody struct {
	// The file to upload
	File []byte `encoding:"form"`
	// ID of the task
	Extension *string `encoding:"form"`
}

// GetTaskQueueResponseBody is the type of the "mktextr" service "GetTaskQueue"
// endpoint HTTP response body.
type GetTaskQueueResponseBody struct {
	Tasks []string `form:"tasks,omitempty" json:"tasks,omitempty" xml:"tasks,omitempty"`
}

// GetTextureByCoordinatesOKResponseBody is the type of the "mktextr" service
// "getTextureByCoordinates" endpoint HTTP response body.
type GetTextureByCoordinatesOKResponseBody struct {
	TextureSetState *string `form:"texture_set_state,omitempty" json:"texture_set_state,omitempty" xml:"texture_set_state,omitempty"`
	BaseMapURL      *string `form:"baseMapUrl,omitempty" json:"baseMapUrl,omitempty" xml:"baseMapUrl,omitempty"`
	ContourMapURL   *string `form:"contourMapUrl,omitempty" json:"contourMapUrl,omitempty" xml:"contourMapUrl,omitempty"`
	SubState        *string `form:"sub_state,omitempty" json:"sub_state,omitempty" xml:"sub_state,omitempty"`
}

// GetTextureByCoordinatesPartialContentResponseBody is the type of the
// "mktextr" service "getTextureByCoordinates" endpoint HTTP response body.
type GetTextureByCoordinatesPartialContentResponseBody struct {
	TextureSetState *string `form:"texture_set_state,omitempty" json:"texture_set_state,omitempty" xml:"texture_set_state,omitempty"`
	BaseMapURL      *string `form:"baseMapUrl,omitempty" json:"baseMapUrl,omitempty" xml:"baseMapUrl,omitempty"`
	ContourMapURL   *string `form:"contourMapUrl,omitempty" json:"contourMapUrl,omitempty" xml:"contourMapUrl,omitempty"`
	SubState        *string `form:"sub_state,omitempty" json:"sub_state,omitempty" xml:"sub_state,omitempty"`
}

// GetTextureByCoordinatesBadRequestResponseBody is the type of the "mktextr"
// service "getTextureByCoordinates" endpoint HTTP response body.
type GetTextureByCoordinatesBadRequestResponseBody struct {
	TextureSetState *string `form:"texture_set_state,omitempty" json:"texture_set_state,omitempty" xml:"texture_set_state,omitempty"`
	BaseMapURL      *string `form:"baseMapUrl,omitempty" json:"baseMapUrl,omitempty" xml:"baseMapUrl,omitempty"`
	ContourMapURL   *string `form:"contourMapUrl,omitempty" json:"contourMapUrl,omitempty" xml:"contourMapUrl,omitempty"`
	SubState        *string `form:"sub_state,omitempty" json:"sub_state,omitempty" xml:"sub_state,omitempty"`
}

// NewGetTaskQueueResponseBody builds the HTTP response body from the result of
// the "GetTaskQueue" endpoint of the "mktextr" service.
func NewGetTaskQueueResponseBody(res *mktextr.GetTaskQueueResult) *GetTaskQueueResponseBody {
	body := &GetTaskQueueResponseBody{}
	if res.Tasks != nil {
		body.Tasks = make([]string, len(res.Tasks))
		for i, val := range res.Tasks {
			body.Tasks[i] = val
		}
	}
	return body
}

// NewGetTextureByCoordinatesOKResponseBody builds the HTTP response body from
// the result of the "getTextureByCoordinates" endpoint of the "mktextr"
// service.
func NewGetTextureByCoordinatesOKResponseBody(res *mktextr.GetTextureByCoordinatesResponse) *GetTextureByCoordinatesOKResponseBody {
	body := &GetTextureByCoordinatesOKResponseBody{
		TextureSetState: res.TextureSetState,
		BaseMapURL:      res.BaseMapURL,
		ContourMapURL:   res.ContourMapURL,
		SubState:        res.SubState,
	}
	return body
}

// NewGetTextureByCoordinatesPartialContentResponseBody builds the HTTP
// response body from the result of the "getTextureByCoordinates" endpoint of
// the "mktextr" service.
func NewGetTextureByCoordinatesPartialContentResponseBody(res *mktextr.GetTextureByCoordinatesResponse) *GetTextureByCoordinatesPartialContentResponseBody {
	body := &GetTextureByCoordinatesPartialContentResponseBody{
		TextureSetState: res.TextureSetState,
		BaseMapURL:      res.BaseMapURL,
		ContourMapURL:   res.ContourMapURL,
		SubState:        res.SubState,
	}
	return body
}

// NewGetTextureByCoordinatesBadRequestResponseBody builds the HTTP response
// body from the result of the "getTextureByCoordinates" endpoint of the
// "mktextr" service.
func NewGetTextureByCoordinatesBadRequestResponseBody(res *mktextr.GetTextureByCoordinatesResponse) *GetTextureByCoordinatesBadRequestResponseBody {
	body := &GetTextureByCoordinatesBadRequestResponseBody{
		TextureSetState: res.TextureSetState,
		BaseMapURL:      res.BaseMapURL,
		ContourMapURL:   res.ContourMapURL,
		SubState:        res.SubState,
	}
	return body
}

// NewGetTextureByCoordinatesPayload builds a mktextr service
// getTextureByCoordinates endpoint payload.
func NewGetTextureByCoordinatesPayload(worldID string, x int, y int) *mktextr.GetTextureByCoordinatesPayload {
	v := &mktextr.GetTextureByCoordinatesPayload{}
	v.WorldID = worldID
	v.X = x
	v.Y = y

	return v
}

// NewCompleteTaskPayload builds a mktextr service completeTask endpoint
// payload.
func NewCompleteTaskPayload(body *CompleteTaskRequestBody, taskID string) *mktextr.CompleteTaskPayload {
	v := &mktextr.CompleteTaskPayload{
		File:      body.File,
		Extension: *body.Extension,
	}
	v.TaskID = taskID

	return v
}

// ValidateCompleteTaskRequestBody runs the validations defined on
// CompleteTaskRequestBody
func ValidateCompleteTaskRequestBody(body *CompleteTaskRequestBody) (err error) {
	if body.File == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("file", "body"))
	}
	if body.Extension == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("extension", "body"))
	}
	return
}
