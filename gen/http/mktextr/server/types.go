// Code generated by goa v3.20.0, DO NOT EDIT.
//
// mktextr HTTP server types
//
// Command:
// $ goa gen mktextr/design

package server

import (
	mktextr "mktextr/gen/mktextr"
	mktextrviews "mktextr/gen/mktextr/views"

	goa "goa.design/goa/v3/pkg"
)

// CompleteTaskRequestBody is the type of the "mktextr" service "completeTask"
// endpoint HTTP request body.
type CompleteTaskRequestBody struct {
	// The file to upload
	File []byte `encoding:"form"`
	// Name of the file
	Filename *string `encoding:"form"`
}

// GetTextureByCoordinatesOKResponseBody is the type of the "mktextr" service
// "getTextureByCoordinates" endpoint HTTP response body.
type GetTextureByCoordinatesOKResponseBody struct {
	TaskID        *string `form:"taskId,omitempty" json:"taskId,omitempty" xml:"taskId,omitempty"`
	BaseMapURL    *string `form:"baseMapUrl,omitempty" json:"baseMapUrl,omitempty" xml:"baseMapUrl,omitempty"`
	ContourMapURL *string `form:"contourMapUrl,omitempty" json:"contourMapUrl,omitempty" xml:"contourMapUrl,omitempty"`
}

// GetTextureByCoordinatesAcceptedResponseBody is the type of the "mktextr"
// service "getTextureByCoordinates" endpoint HTTP response body.
type GetTextureByCoordinatesAcceptedResponseBody struct {
	TaskID        *string `form:"taskId,omitempty" json:"taskId,omitempty" xml:"taskId,omitempty"`
	BaseMapURL    *string `form:"baseMapUrl,omitempty" json:"baseMapUrl,omitempty" xml:"baseMapUrl,omitempty"`
	ContourMapURL *string `form:"contourMapUrl,omitempty" json:"contourMapUrl,omitempty" xml:"contourMapUrl,omitempty"`
}

// GetTextureByCoordinatesBadRequestResponseBody is the type of the "mktextr"
// service "getTextureByCoordinates" endpoint HTTP response body.
type GetTextureByCoordinatesBadRequestResponseBody struct {
	TaskID        *string `form:"taskId,omitempty" json:"taskId,omitempty" xml:"taskId,omitempty"`
	BaseMapURL    *string `form:"baseMapUrl,omitempty" json:"baseMapUrl,omitempty" xml:"baseMapUrl,omitempty"`
	ContourMapURL *string `form:"contourMapUrl,omitempty" json:"contourMapUrl,omitempty" xml:"contourMapUrl,omitempty"`
}

// NewGetTextureByCoordinatesOKResponseBody builds the HTTP response body from
// the result of the "getTextureByCoordinates" endpoint of the "mktextr"
// service.
func NewGetTextureByCoordinatesOKResponseBody(res *mktextrviews.GetResultView) *GetTextureByCoordinatesOKResponseBody {
	body := &GetTextureByCoordinatesOKResponseBody{
		TaskID:        res.TaskID,
		BaseMapURL:    res.BaseMapURL,
		ContourMapURL: res.ContourMapURL,
	}
	return body
}

// NewGetTextureByCoordinatesAcceptedResponseBody builds the HTTP response body
// from the result of the "getTextureByCoordinates" endpoint of the "mktextr"
// service.
func NewGetTextureByCoordinatesAcceptedResponseBody(res *mktextrviews.GetResultView) *GetTextureByCoordinatesAcceptedResponseBody {
	body := &GetTextureByCoordinatesAcceptedResponseBody{
		TaskID:        res.TaskID,
		BaseMapURL:    res.BaseMapURL,
		ContourMapURL: res.ContourMapURL,
	}
	return body
}

// NewGetTextureByCoordinatesBadRequestResponseBody builds the HTTP response
// body from the result of the "getTextureByCoordinates" endpoint of the
// "mktextr" service.
func NewGetTextureByCoordinatesBadRequestResponseBody(res *mktextrviews.GetResultView) *GetTextureByCoordinatesBadRequestResponseBody {
	body := &GetTextureByCoordinatesBadRequestResponseBody{
		TaskID:        res.TaskID,
		BaseMapURL:    res.BaseMapURL,
		ContourMapURL: res.ContourMapURL,
	}
	return body
}

// NewGetTextureByIDPayload builds a mktextr service getTextureById endpoint
// payload.
func NewGetTextureByIDPayload(id string) *mktextr.GetTextureByIDPayload {
	v := &mktextr.GetTextureByIDPayload{}
	v.ID = id

	return v
}

// NewGetTextureByCoordinatesPayload builds a mktextr service
// getTextureByCoordinates endpoint payload.
func NewGetTextureByCoordinatesPayload(worldID string, x int, y int) *mktextr.GetTextureByCoordinatesPayload {
	v := &mktextr.GetTextureByCoordinatesPayload{}
	v.WorldID = worldID
	v.X = x
	v.Y = y

	return v
}

// NewCompleteTaskPayload builds a mktextr service completeTask endpoint
// payload.
func NewCompleteTaskPayload(body *CompleteTaskRequestBody, taskID string) *mktextr.CompleteTaskPayload {
	v := &mktextr.CompleteTaskPayload{
		File:     body.File,
		Filename: *body.Filename,
	}
	v.TaskID = taskID

	return v
}

// ValidateCompleteTaskRequestBody runs the validations defined on
// CompleteTaskRequestBody
func ValidateCompleteTaskRequestBody(body *CompleteTaskRequestBody) (err error) {
	if body.File == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("file", "body"))
	}
	if body.Filename == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("filename", "body"))
	}
	return
}
