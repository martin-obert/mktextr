// Code generated by goa v3.20.0, DO NOT EDIT.
//
// mktextr HTTP client encoders and decoders
//
// Command:
// $ goa gen mktextr/design

package client

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"mime/multipart"
	mktextr "mktextr/gen/mktextr"
	"net/http"
	"net/url"

	goahttp "goa.design/goa/v3/http"
)

// BuildGetTextureByIDRequest instantiates a HTTP request object with method
// and path set to call the "mktextr" service "getTextureById" endpoint
func (c *Client) BuildGetTextureByIDRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		id string
	)
	{
		p, ok := v.(*mktextr.GetTextureByIDPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("mktextr", "getTextureById", "*mktextr.GetTextureByIDPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetTextureByIDMktextrPath(id)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("mktextr", "getTextureById", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeGetTextureByIDResponse returns a decoder for responses returned by the
// mktextr getTextureById endpoint. restoreBody controls whether the response
// body should be restored after having been read.
func DecodeGetTextureByIDResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNoContent:
			return nil, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("mktextr", "getTextureById", resp.StatusCode, string(body))
		}
	}
}

// BuildGetTextureByCoordinatesRequest instantiates a HTTP request object with
// method and path set to call the "mktextr" service "getTextureByCoordinates"
// endpoint
func (c *Client) BuildGetTextureByCoordinatesRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetTextureByCoordinatesMktextrPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("mktextr", "getTextureByCoordinates", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetTextureByCoordinatesRequest returns an encoder for requests sent to
// the mktextr getTextureByCoordinates server.
func EncodeGetTextureByCoordinatesRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*mktextr.GetTextureByCoordinatesPayload)
		if !ok {
			return goahttp.ErrInvalidType("mktextr", "getTextureByCoordinates", "*mktextr.GetTextureByCoordinatesPayload", v)
		}
		values := req.URL.Query()
		values.Add("worldId", p.WorldID)
		values.Add("x", fmt.Sprintf("%v", p.X))
		values.Add("y", fmt.Sprintf("%v", p.Y))
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeGetTextureByCoordinatesResponse returns a decoder for responses
// returned by the mktextr getTextureByCoordinates endpoint. restoreBody
// controls whether the response body should be restored after having been read.
func DecodeGetTextureByCoordinatesResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusPermanentRedirect:
			var (
				body GetTextureByCoordinatesPermanentRedirectResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mktextr", "getTextureByCoordinates", err)
			}
			var (
				location *string
			)
			locationRaw := resp.Header.Get("Location")
			if locationRaw != "" {
				location = &locationRaw
			}
			res := NewGetTextureByCoordinatesResultPermanentRedirect(&body, location)
			tmp := "*"
			res.Location = &tmp
			return res, nil
		case http.StatusAccepted:
			var (
				body GetTextureByCoordinatesAcceptedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mktextr", "getTextureByCoordinates", err)
			}
			var (
				xmktextrTaskID *string
			)
			xmktextrTaskIDRaw := resp.Header.Get("X-Mktextr-Task-Id")
			if xmktextrTaskIDRaw != "" {
				xmktextrTaskID = &xmktextrTaskIDRaw
			}
			res := NewGetTextureByCoordinatesResultAccepted(&body, xmktextrTaskID)
			tmp := "*"
			res.XmktextrTaskID = &tmp
			return res, nil
		case http.StatusInternalServerError:
			var (
				body GetTextureByCoordinatesInternalServerErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mktextr", "getTextureByCoordinates", err)
			}
			res := NewGetTextureByCoordinatesResultInternalServerError(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("mktextr", "getTextureByCoordinates", resp.StatusCode, string(body))
		}
	}
}

// BuildCompleteTaskRequest instantiates a HTTP request object with method and
// path set to call the "mktextr" service "completeTask" endpoint
func (c *Client) BuildCompleteTaskRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		taskID string
	)
	{
		p, ok := v.(*mktextr.CompleteTaskPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("mktextr", "completeTask", "*mktextr.CompleteTaskPayload", v)
		}
		taskID = p.TaskID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CompleteTaskMktextrPath(taskID)}
	req, err := http.NewRequest("PATCH", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("mktextr", "completeTask", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCompleteTaskRequest returns an encoder for requests sent to the
// mktextr completeTask server.
func EncodeCompleteTaskRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*mktextr.CompleteTaskPayload)
		if !ok {
			return goahttp.ErrInvalidType("mktextr", "completeTask", "*mktextr.CompleteTaskPayload", v)
		}
		if err := encoder(req).Encode(p); err != nil {
			return goahttp.ErrEncodingError("mktextr", "completeTask", err)
		}
		return nil
	}
}

// NewMktextrCompleteTaskEncoder returns an encoder to encode the multipart
// request for the "mktextr" service "completeTask" endpoint.
func NewMktextrCompleteTaskEncoder(encoderFn MktextrCompleteTaskEncoderFunc) func(r *http.Request) goahttp.Encoder {
	return func(r *http.Request) goahttp.Encoder {
		body := &bytes.Buffer{}
		mw := multipart.NewWriter(body)
		return goahttp.EncodingFunc(func(v any) error {
			p := v.(*mktextr.CompleteTaskPayload)
			if err := encoderFn(mw, p); err != nil {
				return err
			}
			r.Body = io.NopCloser(body)
			r.Header.Set("Content-Type", mw.FormDataContentType())
			return mw.Close()
		})
	}
}

// DecodeCompleteTaskResponse returns a decoder for responses returned by the
// mktextr completeTask endpoint. restoreBody controls whether the response
// body should be restored after having been read.
func DecodeCompleteTaskResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("mktextr", "completeTask", resp.StatusCode, string(body))
		}
	}
}
