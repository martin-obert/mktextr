// Code generated by goa v3.20.0, DO NOT EDIT.
//
// mktextr HTTP client CLI support package
//
// Command:
// $ goa gen mktextr/design

package cli

import (
	"flag"
	"fmt"
	mktextrc "mktextr/gen/http/mktextr/client"
	"net/http"
	"os"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `mktextr (get-texture-by-id|get-texture-by-coordinates|complete-task)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` mktextr get-texture-by-id --id "Et et dicta quae velit voluptates dolor."` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
	mktextrCompleteTaskEncoderFn mktextrc.MktextrCompleteTaskEncoderFunc,
) (goa.Endpoint, any, error) {
	var (
		mktextrFlags = flag.NewFlagSet("mktextr", flag.ContinueOnError)

		mktextrGetTextureByIDFlags  = flag.NewFlagSet("get-texture-by-id", flag.ExitOnError)
		mktextrGetTextureByIDIDFlag = mktextrGetTextureByIDFlags.String("id", "REQUIRED", "Texture ID")

		mktextrGetTextureByCoordinatesFlags       = flag.NewFlagSet("get-texture-by-coordinates", flag.ExitOnError)
		mktextrGetTextureByCoordinatesWorldIDFlag = mktextrGetTextureByCoordinatesFlags.String("world-id", "REQUIRED", "")
		mktextrGetTextureByCoordinatesXFlag       = mktextrGetTextureByCoordinatesFlags.String("x", "REQUIRED", "")
		mktextrGetTextureByCoordinatesYFlag       = mktextrGetTextureByCoordinatesFlags.String("y", "REQUIRED", "")

		mktextrCompleteTaskFlags      = flag.NewFlagSet("complete-task", flag.ExitOnError)
		mktextrCompleteTaskBodyFlag   = mktextrCompleteTaskFlags.String("body", "REQUIRED", "")
		mktextrCompleteTaskTaskIDFlag = mktextrCompleteTaskFlags.String("task-id", "REQUIRED", "ID of the task")
	)
	mktextrFlags.Usage = mktextrUsage
	mktextrGetTextureByIDFlags.Usage = mktextrGetTextureByIDUsage
	mktextrGetTextureByCoordinatesFlags.Usage = mktextrGetTextureByCoordinatesUsage
	mktextrCompleteTaskFlags.Usage = mktextrCompleteTaskUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "mktextr":
			svcf = mktextrFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "mktextr":
			switch epn {
			case "get-texture-by-id":
				epf = mktextrGetTextureByIDFlags

			case "get-texture-by-coordinates":
				epf = mktextrGetTextureByCoordinatesFlags

			case "complete-task":
				epf = mktextrCompleteTaskFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     any
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "mktextr":
			c := mktextrc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "get-texture-by-id":
				endpoint = c.GetTextureByID()
				data, err = mktextrc.BuildGetTextureByIDPayload(*mktextrGetTextureByIDIDFlag)
			case "get-texture-by-coordinates":
				endpoint = c.GetTextureByCoordinates()
				data, err = mktextrc.BuildGetTextureByCoordinatesPayload(*mktextrGetTextureByCoordinatesWorldIDFlag, *mktextrGetTextureByCoordinatesXFlag, *mktextrGetTextureByCoordinatesYFlag)
			case "complete-task":
				endpoint = c.CompleteTask(mktextrCompleteTaskEncoderFn)
				data, err = mktextrc.BuildCompleteTaskPayload(*mktextrCompleteTaskBodyFlag, *mktextrCompleteTaskTaskIDFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// mktextrUsage displays the usage of the mktextr command and its subcommands.
func mktextrUsage() {
	fmt.Fprintf(os.Stderr, `Texture store
Usage:
    %[1]s [globalflags] mktextr COMMAND [flags]

COMMAND:
    get-texture-by-id: GetTextureByID implements getTextureById.
    get-texture-by-coordinates: GetTextureByCoordinates implements getTextureByCoordinates.
    complete-task: CompleteTask implements completeTask.

Additional help:
    %[1]s mktextr COMMAND --help
`, os.Args[0])
}
func mktextrGetTextureByIDUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] mktextr get-texture-by-id -id STRING

GetTextureByID implements getTextureById.
    -id STRING: Texture ID

Example:
    %[1]s mktextr get-texture-by-id --id "Et et dicta quae velit voluptates dolor."
`, os.Args[0])
}

func mktextrGetTextureByCoordinatesUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] mktextr get-texture-by-coordinates -world-id STRING -x INT -y INT

GetTextureByCoordinates implements getTextureByCoordinates.
    -world-id STRING: 
    -x INT: 
    -y INT: 

Example:
    %[1]s mktextr get-texture-by-coordinates --world-id "Cum sequi." --x 2890731354217571008 --y 4926212361102318830
`, os.Args[0])
}

func mktextrCompleteTaskUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] mktextr complete-task -body JSON -task-id STRING

CompleteTask implements completeTask.
    -body JSON: 
    -task-id STRING: ID of the task

Example:
    %[1]s mktextr complete-task --body '{
      "file": "TmloaWwgcmVydW0gcXVpIGV0IGRvbG9yIHByYWVzZW50aXVtIGxhYm9ydW0u",
      "filename": "Et earum."
   }' --task-id "Voluptate vel voluptas."
`, os.Args[0])
}
