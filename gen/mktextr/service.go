// Code generated by goa v3.20.0, DO NOT EDIT.
//
// mktextr service
//
// Command:
// $ goa gen mktextr/design

package mktextr

import (
	"context"
	mktextrviews "mktextr/gen/mktextr/views"
)

// Texture store
type Service interface {
	// GetTextureByID implements getTextureById.
	GetTextureByID(context.Context, *GetTextureByIDPayload) (err error)
	// GetTextureByCoordinates implements getTextureByCoordinates.
	GetTextureByCoordinates(context.Context, *GetTextureByCoordinatesPayload) (res *GetResult, err error)
	// CompleteTask implements completeTask.
	CompleteTask(context.Context, *CompleteTaskPayload) (err error)
}

// APIName is the name of the API as defined in the design.
const APIName = "mktextr"

// APIVersion is the version of the API as defined in the design.
const APIVersion = "0.0.1"

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "mktextr"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [3]string{"getTextureById", "getTextureByCoordinates", "completeTask"}

// CompleteTaskPayload is the payload type of the mktextr service completeTask
// method.
type CompleteTaskPayload struct {
	// The file to upload
	File []byte `encoding:"form"`
	// Name of the file
	Filename string `encoding:"form"`
	// ID of the task
	TaskID string
}

// GetResult is the result type of the mktextr service getTextureByCoordinates
// method.
type GetResult struct {
	StatusCode    *string
	TaskID        *string
	BaseMapURL    *string
	ContourMapURL *string
}

// GetTextureByCoordinatesPayload is the payload type of the mktextr service
// getTextureByCoordinates method.
type GetTextureByCoordinatesPayload struct {
	// Texture X
	X int
	// Texture y
	Y int
	// WorldId
	WorldID string
}

// GetTextureByIDPayload is the payload type of the mktextr service
// getTextureById method.
type GetTextureByIDPayload struct {
	// Texture ID
	ID string
}

// NewGetResult initializes result type GetResult from viewed result type
// GetResult.
func NewGetResult(vres *mktextrviews.GetResult) *GetResult {
	return newGetResult(vres.Projected)
}

// NewViewedGetResult initializes viewed result type GetResult from result type
// GetResult using the given view.
func NewViewedGetResult(res *GetResult, view string) *mktextrviews.GetResult {
	p := newGetResultView(res)
	return &mktextrviews.GetResult{Projected: p, View: "default"}
}

// newGetResult converts projected type GetResult to service type GetResult.
func newGetResult(vres *mktextrviews.GetResultView) *GetResult {
	res := &GetResult{
		TaskID:        vres.TaskID,
		BaseMapURL:    vres.BaseMapURL,
		ContourMapURL: vres.ContourMapURL,
	}
	return res
}

// newGetResultView projects result type GetResult to projected type
// GetResultView using the "default" view.
func newGetResultView(res *GetResult) *mktextrviews.GetResultView {
	vres := &mktextrviews.GetResultView{
		TaskID:        res.TaskID,
		BaseMapURL:    res.BaseMapURL,
		ContourMapURL: res.ContourMapURL,
	}
	return vres
}
